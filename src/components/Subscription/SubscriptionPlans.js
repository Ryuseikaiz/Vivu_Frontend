import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from '../../contexts/AuthContext';
import PromoCodeInput from './PromoCodeInput';
import './SubscriptionPlans.css';

const SubscriptionPlans = () => {
  const [plans, setPlans] = useState({});
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const { user, refreshUser } = useAuth();

  useEffect(() => {
    fetchPlans();
  }, []);

  const fetchPlans = async () => {
    try {
      const response = await axios.get('/api/payment/plans');
      setPlans(response.data.plans);
    } catch (error) {
      console.error('Error fetching plans:', error);
    }
  };

  const handleSubscribe = async (planType) => {
    setLoading(true);
    setMessage('');

    try {
      const response = await axios.post('/api/payment/create-payment', {
        planType
      });

      // Redirect to PayOS payment page
      window.location.href = response.data.paymentUrl;
    } catch (error) {
      setMessage({
        type: 'error',
        text: error.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫°o link thanh to√°n'
      });
    } finally {
      setLoading(false);
    }
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  return (
    <div className="subscription-container">
      <h2>G√≥i Subscription</h2>
      
      {user?.subscription && (
        <div className="current-subscription">
          <h3>G√≥i hi·ªán t·∫°i</h3>
          <div className="subscription-info">
            <p><strong>Lo·∫°i:</strong> {
              user.subscription.type === 'trial' ? 'D√πng th·ª≠' :
              user.subscription.type === 'monthly' ? 'G√≥i th√°ng' :
              user.subscription.type === 'yearly' ? 'G√≥i nƒÉm' : 'H·∫øt h·∫°n'
            }</p>
            <p><strong>Tr·∫°ng th√°i:</strong> 
              <span className={user.isSubscriptionActive ? 'active' : 'inactive'}>
                {user.isSubscriptionActive ? ' ƒêang ho·∫°t ƒë·ªông' : ' H·∫øt h·∫°n'}
              </span>
            </p>
            {user.subscription.endDate && (
              <p><strong>H·∫øt h·∫°n:</strong> {formatDate(user.subscription.endDate)}</p>
            )}
            <p><strong>S·ªë l·∫ßn t√¨m ki·∫øm:</strong> {user.usage?.searchCount || 0}</p>
            {user.canUseTrial && (
              <p className="trial-available">üéâ B·∫°n c√≤n 1 l·∫ßn d√πng th·ª≠ mi·ªÖn ph√≠!</p>
            )}
          </div>
        </div>
      )}

      {/* Promo Code Section */}
      <PromoCodeInput onSuccess={refreshUser} />

      <div className="plans-grid">
        {Object.entries(plans).map(([planType, plan]) => (
          <div key={planType} className="plan-card">
            <div className="plan-header">
              <h3>{plan.name}</h3>
              <div className="plan-price">
                {formatPrice(plan.price)}
                <span className="plan-duration">
                  /{planType === 'yearly' ? 'nƒÉm' : 'th√°ng'}
                </span>
              </div>
            </div>
            
            <div className="plan-description">
              <p>{plan.description}</p>
            </div>

            <div className="plan-features">
              <ul>
                <li>‚úÖ T√¨m ki·∫øm chuy·∫øn bay kh√¥ng gi·ªõi h·∫°n</li>
                <li>‚úÖ T√¨m ki·∫øm kh√°ch s·∫°n kh√¥ng gi·ªõi h·∫°n</li>
                <li>‚úÖ G·ª≠i email th√¥ng tin du l·ªãch</li>
                <li>‚úÖ H·ªó tr·ª£ 24/7</li>
                {planType === 'yearly' && (
                  <li>üéâ Ti·∫øt ki·ªám 2 th√°ng so v·ªõi g√≥i th√°ng</li>
                )}
              </ul>
            </div>

            <button
              className={`subscribe-button ${planType}`}
              onClick={() => handleSubscribe(planType)}
              disabled={loading || (user?.subscription?.type === planType && user?.isSubscriptionActive)}
            >
              {user?.subscription?.type === planType && user?.isSubscriptionActive
                ? 'ƒêang s·ª≠ d·ª•ng'
                : loading
                ? 'ƒêang x·ª≠ l√Ω...'
                : 'ƒêƒÉng k√Ω ngay'
              }
            </button>
          </div>
        ))}
      </div>

      {message && (
        <div className={`message ${message.type}`}>
          {message.text}
        </div>
      )}

      <div className="payment-info">
        <h4>Th√¥ng tin thanh to√°n</h4>
        <p>üí≥ Thanh to√°n an to√†n qua PayOS</p>
        <p>üîí H·ªó tr·ª£ c√°c ph∆∞∆°ng th·ª©c: ATM, Visa, Mastercard, QR Code</p>
        <p>üìß H√≥a ƒë∆°n s·∫Ω ƒë∆∞·ª£c g·ª≠i qua email sau khi thanh to√°n th√†nh c√¥ng</p>
      </div>
    </div>
  );
};

export default SubscriptionPlans;